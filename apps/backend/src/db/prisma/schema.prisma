generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum TaskPriority {
  low
  medium
  high
}

enum TaskStatus {
  pending
  in_progress
  completed
}

enum TaskCategory {
  creative
  admin
  meeting
  learning
  personal
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  password      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accountStatus AccountStatus
  userRole      UserRole      @default(USER)

  tasks     Task[]
  plannings Planning[]
  Mood      Mood[]

  @@map("users")
}

model Mood {
  id        String   @id @default(cuid())
  userId    String
  value     Int      @db.SmallInt
  date      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("moods")
}

model Task {
  id                String       @id @default(cuid())
  userId            String
  title             String
  description       String?
  priority          TaskPriority @default(medium)
  status            TaskStatus   @default(pending)
  category          TaskCategory
  estimatedDuration Int // minutes
  actualDuration    Int? // minutes
  completedAt       DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  PlanningTasks PlanningTask[]

  @@map("tasks")
}

model Planning {
  id                 String   @id @default(cuid())
  userId             String
  date               DateTime @db.Date
  aiRecommendations  String
  totalEstimatedTime Int // minutes
  actualProductivity Int?     @db.SmallInt
  createdAt          DateTime @default(now())

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  debrief       Debrief?
  planningTasks PlanningTask[]

  @@unique([userId, date])
  @@map("plannings")
}

model Debrief {
  id                 String   @id @default(cuid())
  planningId         String   @unique
  userReflexion      String
  aiAnalysis         String
  success            String
  improvementAvenues String
  createdAt          DateTime @default(now())

  planning Planning @relation(fields: [planningId], references: [id], onDelete: Cascade)

  @@map("debriefs")
}

model PlanningTask {
  id         String   @id @default(cuid())
  planningId String
  taskId     String
  createdAt  DateTime @default(now())

  planning Planning @relation(fields: [planningId], references: [id], onDelete: Cascade)
  task     Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([planningId, taskId])
  @@map("planning_tasks")
}
